import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:synq/admin/providers/agent_providers.dart';
import 'package:synq/agents/models/agent_model.dart';

class ManageAgentsScreen extends ConsumerWidget {
  const ManageAgentsScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final agents = ref.watch(agentsProvider);

    return Scaffold(
      appBar: AppBar(title: const Text('Manage Agents')),
      body: agents.when(
        data: (agentList) => ListView.builder(
          itemCount: agentList.length,
          itemBuilder: (context, index) {
            final agent = agentList[index];
            return ListTile(
              title: Text(agent.name),
              subtitle: Text(agent.email),
              trailing: IconButton(
                icon: const Icon(Icons.delete),
                onPressed: () => _deleteAgent(context, ref, agent),
              ),
            );
          },
        ),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Error: $error')),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _showAddAgentDialog(context, ref),
        child: const Icon(Icons.add),
      ),
    );
  }

  void _showAddAgentDialog(BuildContext context, WidgetRef ref) {
    final nameController = TextEditingController();
    final emailController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Add New Agent'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: nameController,
              decoration: const InputDecoration(labelText: 'Name'),
            ),
            TextField(
              controller: emailController,
              decoration: const InputDecoration(labelText: 'Email'),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () async {
              if (nameController.text.isNotEmpty && emailController.text.isNotEmpty) {
                final agentService = ref.read(agentServiceProvider);
                await agentService.addAgent(
                  Agent(
                    id: '', // ID will be generated by Supabase
                    name: nameController.text,
                    email: emailController.text,
                    createdAt: DateTime.now(),
                  ),
                );
                ref.refresh(agentsProvider);
                Navigator.pop(context);
              }
            },
            child: const Text('Add'),
          ),
        ],
      ),
    );
  }

  void _deleteAgent(BuildContext context, WidgetRef ref, Agent agent) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Agent'),
        content: Text('Are you sure you want to delete ${agent.name}?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () async {
              final agentService = ref.read(agentServiceProvider);
              await agentService.deleteAgent(agent.id);
              ref.refresh(agentsProvider);
              Navigator.pop(context);
            },
            child: const Text('Delete'),
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
          ),
        ],
      ),
    );
  }
}